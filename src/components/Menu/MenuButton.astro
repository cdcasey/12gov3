<input type="checkbox" name="" id="nav-toggle" class="navigation__checkbox" />
<label for="nav-toggle" class="navigation__button">
	<span class="navigation__icon"></span>
</label>

<style>
	@reference '@/styles/global.css';
	/* style other things based on the state of the checkbox */
	.navigation__checkbox {
		@apply hidden;

		/* hide the center bar when the button is clicked (checkbox is checked) */
		&:checked + .navigation__button .navigation__icon {
			@apply bg-transparent;
		}

		&:checked + .navigation__button .navigation__icon::before {
			@apply top-0 rotate-[135deg];
		}

		&:checked + .navigation__button .navigation__icon::after {
			@apply top-0 -rotate-[135deg];
		}
	}

	/* Gets applied to the label because labels can be styled and control the checkboxes */
	.navigation__button {
		@apply bg-otgopurple-dark/95 fixed top-[10px] left-[10px] z-10 flex h-[70px] w-[70px] cursor-pointer items-center justify-center rounded-full shadow-2xl;

		/* animate the hamburger on hover */
		&:hover .navigation__icon:before {
			@apply -top-3;
		}
		&:hover .navigation__icon:after {
			@apply top-3;
		}
	}

	/* the hamburger itself */
	.navigation__icon {
		@apply relative;

		/* set look of each bar */
		&,
		&::before,
		&::after {
			@apply bg-otgowhite h-[2px] w-8;
		}

		/* make top & bottom bars appear */
		&::before,
		&::after {
			@apply absolute transition-all ease-linear content-[''];
		}

		/* position top & bottom bars */
		&::before {
			@apply -top-2;
		}
		&::after {
			@apply top-2;
		}
	}
</style>

<script>
	import { menuIsOpen } from '@/stores/menuStore';

	function toggleMenu() {
		menuIsOpen.set(!menuIsOpen.get());
	}

	document.getElementById('nav-toggle')?.addEventListener('click', toggleMenu);
</script>
